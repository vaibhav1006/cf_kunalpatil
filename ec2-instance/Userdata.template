{
"AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "Cloud Formation stack to create Single VPC",
    "Parameters"               : {
        "CustomerPrefix" : {
            "Type" : "String",
            "Default" : "randomtest",
            "Description" : "Enter Customer Prefix"
        },
        "Region"         : {
            "Type" : "String",
            "Default" : "us-east-1",
            "Description" : "Region in which VPC will be launched",
            "AllowedValues" : [
                "eu-central-1",
                "eu-west-1",
                "eu-west-2",
                "us-east-1",
                "us-west-1"
            ]
        },
        "Environment"    : {
            "Type" : "String",
            "Default" : "dt",
            "Description" : "Enter Environment (Input Format - d=development, t=test, a=acceptance, p=production, dt=devtest, ap=acceptanceproduction)",
            "AllowedValues" : [
                "d",
                "t",
                "a",
                "p",
                "dt",
                "ap"
            ]
        },
		"AZ"             : {
            "Type" : "String",
            "Default" : "a",
            "Description" : "Enter AZ (a,b,c,d,e)",
            "AllowedValues" : [
                "a",
                "b",
                "c",
                "d",
                "e"
            ]
        },
        "Zone"           : {
            "Type" : "String",
            "Default" : "ID",
            "Description" : "Enter Zone (Input Format - I=Internal, E=External, PE=Public Edge, M=Management, ED=External Dev, External Test, ID=Internal Dev, IT=Internal Test, EA=External Acceptance, EP=External Production, IA=Internal Acceptance, IP=Internal Production)",
            "AllowedValues" : [
                "I",
                "E",
                "PE",
                "M",
                "ED",
                "ET",
                "ID",
                "IT",
                "EA",
                "EP",
                "IA",
                "IP"
            ]
        },
	"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the host",
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"Default" : "jenkins",
			"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
	"EC2InstanceType" : {
			"Description" : "EC2 instance type",
			"Type" : "String",
			"Default" : "t2.micro",
			"AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
			"ConstraintDescription" : "must be a valid EC2 instance type."
        },
	"SubnetID":{
		 "Type" : "String",
         "Description" : "Enter subnetID"
		 },
		 
	"SecurityGroup":{
		 "Type" : "String",
         "Description" : "Enter SecurityGroup"
		}
	},
	
	"Resources":{
				"EC2Host" : {
				"Type" : "AWS::EC2::Instance",
				"Metadata" : {
						"Comment" : "Install a simple application",
						"AWS::CloudFormation::Init" : {
							"config" : {
								"packages" : {
										"apt" : {
										"mesos":[],
										"marathon":[],
										"docker.io":[]
											}
									},
								"files" :{
										"/etc/cfn/cfn-hup.conf" : {
											"content" : { "Fn::Join" : ["", [
															"[main]\n",
															"stack=", { "Ref" : "AWS::StackId" }, "\n",
															"region=", { "Ref" : "AWS::Region" }, "\n",
															"interval=1","\n"
											            ]
													]
												},
											"mode"    : "000400",
											"owner"   : "root",
											"group"   : "root"
										},

										"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
												"content": { "Fn::Join" : ["", [
														"[cfn-auto-reloader-hook]\n",
														"triggers=post.update\n",
														"path=Resources.EC2Host.Metadata.AWS::CloudFormation::Init\n",
														"action=cfn-init -v ",
														"         --stack ", { "Ref" : "AWS::StackName" },
														"         --resource EC2Host ",
														"         --region ", { "Ref" : "AWS::Region" }, "\n",
														"runas=root\n"
														]]}
										
										},
									 "/opt/marathon-setup.sh":{
														"content":{"Fn::Join" :["\n",[
														"#!/bin/bash -xe",
														"echo 'docker,mesos' > /etc/mesos-slave/containerizers",
														"echo '10mins' > /etc/mesos-slave/executor_registration_timeout",
														"service marathon restart",
														"service zookeeper restart",
														"service mesos-master restart",
														"service mesos-slave restart",
														"service docker restart",
														"systemctl enable marathon",
														"systemctl enable mesos-master",
														"systemctl enable mesos-slave",
														"systemctl enable docker",
														"systemctl enable zookeeper"
													]]},
													"mode"    : "000700",
													"owner"   : "root",
													"group"   : "root"
												},
									"/opt/microbot_v1.json":{
													"source"  :"https://s3.amazonaws.com/sogetinl-mesos/microbot_v1.json",
													"mode"    : "000700",
													"owner"   : "root",
													"group"   : "root"
											
										}
									
									},
								"commands" : { 
									"marathon-setup":{
										 "command" : " /bin/bash /opt/marathon-setup.sh "
										}},
								"services" : {
									"sysvinit" : {
										"zookeeper"	  : { "enabled" : "true", "ensureRunning" : "true" },
										"cfn-hup"  :  { 
													"enabled" : "true", "ensureRunning" : "true" , 
													"files" : ["/etc/cfn/cfn-hup.conf","/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
												}
									}
								}
				
							
							}
							
						
					}	
					},		
			"Properties" : {
					"InstanceType" : { "Ref" : "EC2InstanceType" },
					"KeyName"  : { "Ref" : "KeyName" },
					"ImageId"  : "ami-cd0f5cb6",
					"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
							"#!/bin/bash -xe\n",
							"apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF\n",
							"DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')\n",
							"CODENAME=$(lsb_release -cs)\n",
							"echo deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main |sudo tee /etc/apt/sources.list.d/mesosphere.list \n",
							"apt-get update \n",
							"apt-get install -y openjdk-8-jdk\n",
							"apt-get -y install build-essential python-dev python-six python-virtualenv libcurl4-nss-dev libsasl2-dev libsasl2-modules maven libapr1-dev libsvn-dev zlib1g-dev\n",
							"apt-get install -y python-pip\n",
							"pip install --upgrade pip\n",
							"pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz \n",
							"cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
							"chmod +x /etc/init.d/cfn-hup \n",
							"update-rc.d cfn-hup defaults \n ",
							"service cfn-hup start \n",
							
							"cfn-init -v ",
							"         --stack ", { "Ref" : "AWS::StackName" },
							"         --resource EC2Host ",
							"         --region ", { "Ref" : "AWS::Region" }, "\n",
						
							"sleep 1m","\n",
							"cd /opt/&& curl -X POST -H Content-Type: application/json http://127.0.0.1:8080/v2/apps -d@microbot_v1.json","\n",
							"# Signal the status from cfn-init\n",
							" cfn-signal -e $? ",
							"         --stack ", { "Ref" : "AWS::StackName" },
							"         --resource EC2Host ",
							"         --region ", { "Ref" : "AWS::Region" }, "\n"
						
                        ]]}},
					"NetworkInterfaces" : [{
						"GroupSet"                 : [{"Ref":"SecurityGroup"}],
						"AssociatePublicIpAddress" : "true",
						"DeviceIndex"              : "0",
						"DeleteOnTermination"      : "true",
						"SubnetId"                 : {"Ref":"SubnetID"}
                    }],
					"Tags"  : [
                    {
                        "Key" : "Name",
                        "Value" : {
                            "Fn::Join" : [
                                "",
                                [
                                    {
                                        "Ref" : "CustomerPrefix"
                                    },
                                    "_",
                                    {
                                        "Ref" : "Environment"
                                    },
                                    "_",
                                    {
                                        "Ref" : "Region"
                                    },
                                    {
                                        "Ref" : "AZ"
                                    },
                                    "_",
                                    {
                                        "Ref" : "Zone"
                                    },
                                    "-mesos-standalone"
                                ]
                            ]
                        }
                    }
                ]
                },
				"CreationPolicy" : {
							"ResourceSignal" : {
							"Timeout" : "PT5M"
						}
	
					}
	}
	},
	
	"Outputs"                  : {
		"URL" : {
                "Value" : { "Fn::Join" : [ "", ["http://", { "Fn::GetAtt" : ["EC2Host", "PublicIp"] },"/phpmyadmin"]]},
                "Description" : "Newly created application URL"
            }
        }
}
